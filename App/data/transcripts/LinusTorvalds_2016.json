{
  "id": "LinusTorvalds_2016",
  "transcript": "this is such a strange thing your software linux and i think that there are like a billion and a half active android devices out there your software is in every single one of them that 's what i thought and i was shocked when i saw a picture of it i mean this is this is the linux world headquarters part in this picture that people mostly react to is the walking desk it is the most interesting part in my office and i 'm not actually using it anymore and i think the two things are related the way i work is i want to not have external stimulation you can kind of see on the walls are this light green i 'm told that at mental institutions they use that on the walls it 's not something that really stimulates you but the main thing i worry about in my computer is it doesn 't have to be big and powerful although i like that it really has to be completely silent and i sit there alone in the quiet if the cat and i want to hear the cat purring not the sound of the fans in the computer ca so this is astonishing because working this way you 're able to run this this vast technology empire it is an empire tell us how you got to understand open source and how it lead to the development of linux lt i mean i still work alone i dress up so i have clothes on this was how i started linux too i did not start linux as a collaborative project i started it as one in a series of many projects i had done at the time partly because i needed the end result but even more because i just enjoyed programming so it was it was about the the end of the journey which twenty five years later we still have not reached but it was really about the fact that i was looking for a project on my own and there was no open source really on my radar at all and what happened is the project grows and becomes something you want to show off to people really this is more of a wow look at what i did and trust me it was not that great back then i made it publicly available and it wasn 't even open source at that point at that point it was source that was open but there was no intention behind using the kind of methodology that we think of today to improve it it was more like look i 've been working on this for half a year i 'd love to have comments and other people approached me at the university of helsinki i had a friend who was one of the open source it was called mainly free back then and he actually introduced me to the notion that hey and i thought about it for a while i was actually worried about the whole commercial interests coming in i mean that 's one of the worries i think most people who start out have is that they worry about somebody taking advantage of their work i decided what the hell and ca and then at some point someone contributed some code that you thought wow that really is interesting i would not have thought of that this could actually improve this lt it didn 't even start by people contributing but i had already programmed for half my life basically and every project before that had been completely personal and it was a revelation when and even before they started giving code back that was i think one of the big moments where i said i love other people don 't get me wrong i 'm actually not a people person laughter i i do love other people who comment and and get involved in my project and it made it so much more ca so was there a moment when you saw what was being built and it suddenly started taking off and you thought wait actually could be something huge not just a personal project that i 'm getting nice feedback on but a kind of explosive development in the whole technology world lt not really i mean the big point for me really was not when it was becoming huge it was when it was becoming little the big point for me was not being alone and having ten maybe one hundred people being involved that was a big point then everything else was very going from one hundred people to a million people is not a big deal maybe it is if you 're if you want to sell your result then it 's a huge deal don 't get me wrong but if you 're interested in the technology and you 're interested in the project the big part was getting the community then the community grew gradually and there 's actually not a single point where i went like wow that just took off and it 's not just linux it 's this thing called git which is this management system for software development tell us briefly about that and your your role in that lt so one of the issues we had and this took a while to to start to appear is when you when you grow from having ten people or one hundred people working on a project right now we 're in the situation where just on the kernel we have one thousand people involved in every single release and that 's every two months roughly two or three some of those people don 't do a lot there 's a lot of people who make small small changes but to maintain this the scale changes how you have to maintain it and we went through a lot of pain and there are there are whole projects that do only source code maintenance cvs is the one that used to be the most hated cvs with a passion and refused to touch it and tried something else that was radical and interesting and and everybody else hated ca lt and we were in this bad spot where we had thousands of people who wanted to participate but in many ways i was the the kind of break point where i could not scale to the point where i could work with thousands of people so git is my second big project and this is literally how i work i don 't code for well i do code for fun but i want to code for something meaningful so every single project i 've ever done has been something i needed and ca so and we have to try and understand why it is you 've given us some clues but here 's a picture of you as a kid were you this sort of computer genius you know bernerd were you the star at school who could do everything what were you like as a kid lt yeah i think i was the prototypical nerd i mean i was i was not a people person back then that 's my younger i was clearly more interested in the rubik 's cube than my younger brother my younger sister who 's not in the picture when we had family meetings and it 's not a huge family but i have like a couple of cousins she would prep me beforehand like before i stepped into the room she i don 't think i was particularly exceptional apparently my sister said that my biggest exceptional quality was that i would not let go ca ok so let 's go there because that 's interesting you would not let go so that 's not about being a geek and being smart that 's about being being stubborn lt that 's about being stubborn that 's about like i 'm done let 's do something else look shiny and i worked for the same company in silicon valley for the whole time that is unheard of that 's not how silicon valley works the whole point of silicon valley is that people jump between jobs to kind of that stubbornness sometimes brought you in conflict with other people was that essential to sort of maintain the quality of what was being going back to the i 'm not a shall we say and i 'm not proud of that but at the same time it 's and maybe you should be more aggressive laughter it 's not something i 'm particularly proud of but it 's part of me and one of the things i really like about open source is it really allows different people to work together we don 't have to like each other and sometimes we really don 't like each other really i mean there are very very heated arguments but you can actually you can find things that you don 't even agree to disagree it 's just that you 're interested in really different things and coming back to the point where i said earlier that i was afraid of commercial people taking advantage of your work it turned out and very quickly turned out that those commercial people were and they used open source in ways that and i actually think it works the same way you need to have the warm and friendly people who like i mean if i was stranded on an island and the only way to get off that island was the so there 's different kinds of people and i 'm not making excuses i 'm trying to explain ca now when we talked last week you talked about some some other trait that that you have which i found really interesting it 's this idea called taste and i 've just got a couple of images here i think this is an example of not particularly good taste in code which one can immediately see what is the difference between these two so this is how many people here actually have coded oh my goodness lt so i guarantee you everybody who raised their hand they have done what 's called a singly linked list and it 's taught this the first not very good taste approach is basically how it 's taught to be done when you start out coding and you don 't have to understand the code the most interesting part to me is the last if statement because what happens in a singly linked list this is trying to remove an existing entry from a list and there 's a difference between if it 's the first entry or whether it 's an entry in the middle because if it 's the first entry you have to change the pointer to the first entry if it 's in the middle you have to change the pointer of it does not have the if statement but i want you to understand that sometimes you can see a problem in a different way and rewrite and that 's good code details are important which is how i sent you this stupid example that is not relevant because it 's too small good taste is much bigger than this good taste is about really seeing the big patterns kind of you have taste in a way that 's meaningful to software people but there must be something else i mean you 've changed the future you must have of these grand visions of the future you 're a visionary right lt i 've actually felt slightly uncomfortable at ted for the last two i and i think it 's really i mean i 'm perfectly happy with all the people who are walking around and just staring at the clouds and looking at the stars and saying i want to go there but i 'm looking at the ground and i want to fix the pothole that 's right in front of me before i fall in this is the kind of person i am ca so you spoke to me last week about about these two guys who are they and how do you relate to them clich in technology the whole tesla versus edison where tesla is seen as the visionary scientist and crazy idea man and people love tesla i mean there are people who name their companies after him the other person there is edison who is actually often vilified for being kind of pedestrian and his most famous quote is genius is one percent inspiration and ninety nine percent perspiration and i 'm in the edison camp even if people don 't always like him because if you actually compare the two tesla has kind of this mind but who actually changed the may not have been a nice person he did a lot of things he he was maybe not so intellectual not so visionary but i think i 'm more of an edison than a tesla ca so our theme at ted this week is is dreams big bold audacious dreams you 're really the antidote to that lt i 'm trying to dial it down a bit i 'm really doing fine without doing the whole open source and really letting go thing linux would never have been what it is and so there 's a lot of things going on that make me a very happy man and thinking i did the right choices ca is the open source idea this is i think we 'll end here is the open source idea fully realized now in the world more that it could go are there more things that it could do lt so i 'm of two minds there i think one reason open source works so well in in code is that at the end of the day code tends to be somewhat black and white there 's often a fairly good way to decide this is done correctly and this is not done well code either works or it doesn 't and we have arguments despite this right in many other areas i mean people have talked about open politics and things like that and it 's really hard sometimes to say that yes you can apply the same principles in some other areas just because the black and white turns into not just gray but different colors so obviously open source in science is making a comeback science was there first but then science ended up being pretty closed with very expensive journals and some some of that going on and open source is so there are other examples i 'm sure there are more to come"
}